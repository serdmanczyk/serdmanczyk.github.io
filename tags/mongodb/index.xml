<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Steven Erdmanczyk Jr. </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://serdmanczyk.github.io/tags/mongodb/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Online Class Attendance App using Flask/MongoDB</title>
      <link>http://serdmanczyk.github.io/ClassAtttendanceApp/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://serdmanczyk.github.io/ClassAtttendanceApp/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://serdmanczyk.github.io/images/classattendance/Classes.png&#34; alt=&#34;Classes HomePage&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;My friends and I teach a parkour class at a local gymnastics gym, which we organize ourselves.  We needed a solid method for logging attendance.  There were many free solutions, but they all followed the attendance model similar to school classroom attendance: each class has assigned students and you mark attendance by checking them off as absent, tardy, attended, excused, etc.  This didn&amp;rsquo;t fit our model because we ran our class on a come-as-you-can basis.  For lack of a better solution we used an Excel Google Doc or just left our attendance logs on paper.&lt;/p&gt;

&lt;p&gt;Fast forward: not long ago I decided to take MongoDB&amp;rsquo;s free &lt;a href=&#34;https://university.mongodb.com/&#34;&gt;on-line developer&amp;rsquo;s course&lt;/a&gt;.  Part of the class used a simple blog example using the &lt;a href=&#34;http://bottlepy.org/docs/dev/index.html&#34;&gt;Bottle framework&lt;/a&gt; in Python, which made me think that a Python framework / MongoDB application would suit itself extremely well to what we wanted.  So I set to working using these tools to write my own simple class attendance application in my free time.&lt;/p&gt;

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;My final application is pieced together using the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask micro-framework&lt;/a&gt; to host the web interface, with &lt;a href=&#34;http://jinja.pocoo.org/docs/&#34;&gt;Jinja2&lt;/a&gt; to template web pages based on Python objects.&lt;/li&gt;
&lt;li&gt;Flask&amp;rsquo;s &lt;a href=&#34;https://pythonhosted.org/Flask-OAuth/&#34;&gt;Oauth plug-in&lt;/a&gt; to enable using Google OAuth for simple user authentication.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://api.mongodb.org/python/current/&#34;&gt;PyMongo&lt;/a&gt; to link the web framework to the &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://purecss.io/&#34;&gt;Pure CSS&lt;/a&gt; to simplify making the pages look &amp;lsquo;pretty.&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jqueryui.com/&#34;&gt;JQuery UI&lt;/a&gt; simplified adding handy interface features such as a javascript calendar to select class dates as well as student name auto-completion during attendance logging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt; by RedHat for a free hosting solution easily managed by git and ssh.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;schema&#34;&gt;Schema&lt;/h1&gt;

&lt;p&gt;The MongoDB database schema uses four collections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;authentication: contains Google Oauth credentials as well as the secret key for the application.&lt;/li&gt;
&lt;li&gt;coaches: contains all coaches as well as their e-mails to validate against Google Oauth login.&lt;/li&gt;
&lt;li&gt;students: holds all details about students such as emergency contacts, e-mail, birthdays, etc.&lt;/li&gt;
&lt;li&gt;classes: Contains all records of classes.  Each record contains a date and associates to the record for its indicated coach.  Within the record is a list of attendances with purchase info if applicable and an association to a student record for the attended student.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The schema for the student and classes collections are shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;# Students
{
    &#34;_id&#34; : ObjectId(&#34;53a0ee5b798a010258167aa7&#34;),
    &#34;firstname&#34; : &#34;Eunice&#34;,
    &#34;lastname&#34; : &#34;Anderson&#34;,
    &#34;gender&#34; : &#34;female&#34;,
    &#34;email&#34; : &#34;altheabanks@zensor.com&#34;
    &#34;dob&#34; : ISODate(&#34;1997-09-25T00:00:00Z&#34;),
    &#34;emergencyphone&#34; : &#34;+1 (949) 511-3347&#34;,
    &#34;emergencycontact&#34; : &#34;Althea Banks&#34;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;# Classes
{
    &#34;_id&#34; : ObjectId(&#34;53a0f734798a0110dc74abc1&#34;),
    &#34;date&#34; : ISODate(&#34;2014-01-01T00:00:00Z&#34;),
    &#34;coach&#34; : ObjectId(&#34;53a0ef10798a010f40e8cabc&#34;),
    &#34;type&#34; : &#34;beginner&#34;
    &#34;attendance&#34; : [
        {
            &#34;student&#34; : ObjectId(&#34;53a0ee5b798a010258167ab6&#34;)
        },
        {
            &#34;payment&#34; : {
                &#34;amount&#34; : 15,
                &#34;method&#34; : &#34;credit&#34;,
                &#34;purchased&#34; : &#34;drop in&#34;
            },
            &#34;student&#34; : ObjectId(&#34;53a0ee5b798a010258167ab5&#34;)
        },
        {
            &#34;payment&#34; : {
                &#34;amount&#34; : 0,
                &#34;method&#34; : &#34;punched&#34;,
                &#34;purchased&#34; : null
            },
            &#34;student&#34; : ObjectId(&#34;53a0ee5b798a010258167aaf&#34;)
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://serdmanczyk.github.io/images/classattendance/Schema.png&#34; alt=&#34;Schema Diagram&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://serdmanczyk.github.io/images/classattendance/Class.png&#34; alt=&#34;Class Page&#34; /&gt;
&lt;img src=&#34;http://serdmanczyk.github.io/images/classattendance/Students.png&#34; alt=&#34;Students Page&#34; /&gt;
&lt;img src=&#34;http://serdmanczyk.github.io/images/classattendance/edit_student.png&#34; alt=&#34;Edit Student Page&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;demo-and-source-code&#34;&gt;Demo and Source Code&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://classdemo-evargreen.rhcloud.com/&#34; class=&#34;btn btn-success&#34;&gt;Live Demo&lt;/a&gt;    &lt;a href=&#34;https://github.com/serdmanczyk/parkour_class_attendance_app&#34; class=&#34;btn btn-success&#34;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Editing on the demo is disabled, but forms buttons will still follow through to their final destinations.  Authorization through Google is still used, no user info is maintained, just a session token.  All student and coach data is random sample data generate using &lt;a href=&#34;http://www.json-generator.com/&#34;&gt;json-generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All source code including provisions for OpenShift is available on GitHub.  Fork it and build it into your own class app!&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is just a quick base application I programmed for fun to get practice using new frameworks and technologies.  Future work includes adding more feedback to users when errors happend server-side.  Currently there&amp;rsquo;s no real error checking and only minor form validation.  If there&amp;rsquo;s an exception flask returns a feedback page, if a submit fails the new data simply fails to show up.  I would also add a page to manage coaches as well as an ability to view charts of attendance and revenue over time.  I may use a future post to demonstrate using MapReduce with MongoDB to retrieve related data from two collections in one call, similar to a SQL Join.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
